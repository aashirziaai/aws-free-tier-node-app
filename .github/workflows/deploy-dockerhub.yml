name: CI-CD (Docker Hub, Node Hardened)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  IMAGE: ${{ secrets.DOCKER_IMAGE || format('{0}/{1}', secrets.DOCKERHUB_USERNAME, 'free-tier-node-app') }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME || 'node-free-tier-app' }}
  APP_PORT: 3000
  PUBLIC_PORT: 80

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

      - name: Deploy over SSH (verified host)
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }} # safe if unset
          fingerprint: ${{ secrets.SSH_HOST_FINGERPRINT }}
          script: |
            set -euo pipefail
            sudo docker pull ${{ env.IMAGE }}:latest
            sudo docker rm -f ${{ env.CONTAINER_NAME }} || true
            sudo docker run -d --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.PUBLIC_PORT }}:${{ env.APP_PORT }} \
              --restart unless-stopped \
              --log-driver json-file --log-opt max-size=10m --log-opt max-file=3 \
              --memory=256m --cpus="0.5" \
              -e NODE_ENV=production \
              ${{ env.IMAGE }}:latest
            sudo docker image prune -f

      - name: Smoke test (HTTP 200)
        run: |
          set -e
          for i in {1..12}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/health || true)
            echo "Attempt $i: HTTP $code"
            if [ "$code" = "200" ]; then
              body=$(curl -fsS http://${{ secrets.EC2_HOST }}/health || true)
              echo "$body" | grep -q '"status":"ok"' && exit 0
            fi
            sleep 5
          done
          echo "Healthcheck failed"; exit 1
